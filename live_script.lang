<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Dippi <dippi@altervista.org>

 Derived from coffe_script.lang of: Marc Harter <wavded@gmail.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="livescript" _name="LiveScript" version="2.0" _section="Scripts">
    <metadata>
        <property name="mimetypes">application/livescript;text/livescript</property>
        <property name="globs">*.ls;*.live;*.livescript</property>
        <property name="line-comment-start">#</property>
        <property name="block-comment-start">/*</property>
        <property name="block-comment-end">*/</property>
    </metadata>

    <styles>
        <style id="comment"         _name="Comment"                  map-to="def:comment"/>
        <style id="error"           _name="Error"                    map-to="def:error"/>
        <style id="string"          _name="String"                   map-to="def:string"/>
        <style id="octal"           _name="Octal"                    map-to="def:error"/>
        <style id="decimal"         _name="Decimal"                  map-to="def:number"/>
        <style id="floating-point"  _name="Floating Point"           map-to="def:number"/>
        <style id="global"          _name="Global Value"             map-to="def:special-constant"/>
        <style id="constant"        _name="Constant"                 map-to="def:special-constant"/>
        <style id="label"           _name="Label"                    map-to="def:preprocessor"/>
        <style id="boolean"         _name="Boolean value"            map-to="def:boolean"/>
        <style id="statement"       _name="Statement"                map-to="def:statement"/>
        <style id="loop"            _name="Loop"                     map-to="def:keyword"/>
        <style id="conditional"     _name="Conditional"              map-to="def:keyword"/>
        <style id="operator"        _name="Operator"                 map-to="def:keyword"/>
        <style id="delimiter"       _name="Delimiter"                map-to="def:keyword"/>
        <style id="keyword"         _name="Keyword"                  map-to="def:keyword"/>
        <style id="interpolation"   _name="Interpolation"            map-to="def:identifier"/>
        <style id="regexp"          _name="RegExp"                   map-to="def:special-char"/>
        <style id="function"        _name="Function"                 map-to="def:function"/>
        <style id="application"     _name="Application"              map-to="def:identifier"/>
        <style id="constructor"     _name="Constructor"              map-to="def:type"/>
    </styles>

    <definitions>
        <define-regex id="identifier" extended="true">
            [\p{L}$_](-\p{L}|[\p{L}\d$_])*
        </define-regex>

        <!-- Comments -->
        <context id="block-comment" style-ref="comment">
            <start>/\*</start>
            <end>\*/</end>
            <include>
                <context ref="def:in-comment"/>
            </include>
        </context>

        <context id="close-comment-outside-comment" style-ref="error">
            <match>\*/(?!\*)</match>
        </context>

        <context id="line-comment" style-ref="comment">
            <start>#</start>
            <end>$</end>
            <include>
                <context ref="def:in-comment"/>
            </include>
        </context>

        <!-- Interpolations -->
        <context id="simple-interpolation" style-ref="interpolation">
            <match>#\%{identifier}</match>
        </context>

        <context id="curly-interpolation" style-ref="interpolation">
            <start>#{</start>
            <end>}</end>
            <include>
                <context id="nested-curly">
                    <start>{</start>
                    <end>}</end>
                    <include>
                        <context ref="nested-curly" />
                    </include>
                </context>
            </include>
        </context>

        <!-- Regexps -->
        <context id="regex-line-comment" style-ref="comment" extend-parent="false">
            <start>(^|(?&lt;=\s))#</start>
            <end>$</end>
            <include>
                <context ref="def:in-comment"/>
            </include>
        </context>

        <context id="regexp" style-ref="regexp">
            <match>(^|(?&lt;![\p{L}\d$_]))/(?![\s/*+{}?]).*?[^\\]/[igmy]{0,4}</match>
        </context>

        <context id="heregex" style-ref="regexp">
            <start>\/\/</start>
            <end>\/\/[igmy]{0,4}</end>
            <include>
                <context ref="simple-interpolation"/>
                <context ref="curly-interpolation"/>
                <context ref="regex-line-comment"/>
            </include>
        </context>

        <!-- Strings -->
        <context id="string-heredocs-single" style-ref="string">
            <start>'''</start>
            <end>'''</end>
        </context>

        <context id="string-heredocs-double" style-ref="string">
            <start>"""</start>
            <end>"""</end>
            <include>
                <context ref="def:escape"/>
                <context ref="simple-interpolation"/>
                <context ref="curly-interpolation"/>
            </include>
        </context>

        <context id="string-single" style-ref="string">
            <start>'</start>
            <end>'</end>
            <include>
                <context ref="def:escape"/>
            </include>
        </context>

        <context id="string-double" style-ref="string">
            <start>"</start>
            <end>"</end>
            <include>
                <context ref="def:escape"/>
                <context ref="simple-interpolation"/>
                <context ref="curly-interpolation"/>
            </include>
        </context>

        <context id="backslash-string" style-ref="string">
            <match>\\\S+</match>
        </context>

        <context id="string-javascript" style-ref="string">
            <start>``</start>
            <end>``</end>
        </context>

        <context id="words-list" style-ref="string">
            <start>&lt;\[</start>
            <end>\]&gt;</end>
        </context>

        <!-- Numbers -->
        <context id="octal" style-ref="octal">
            <match>(?&lt;![\p{L}\d$_])0(_?\d)+([\p{L}$][\p{L}\d$_]*|(?!\d))</match>
        </context>

        <context id="float" style-ref="floating-point">
            <match extended="true">
                (?&lt;![\p{L}\d$_])
                (([1-9][0-9_]*|0_*) \. [0-9][0-9_]* ([\p{L}$][\p{L}\d$_]*|(?!\d)) |
                 [1-9][0-9_]* e [+-]? [0-9][0-9_]* ([\p{L}$][\p{L}\d$_]*|(?!\d)) )
            </match>
        </context>

        <context id="decimal" style-ref="decimal">
            <match>(?&lt;![\p{L}\d$_])([1-9][0-9_]*|0)([\p{L}$][\p{L}\d$_]*|(?!\d))</match>
        </context>

        <!-- Constants -->
        <context id="global" style-ref="global">
            <prefix>(?&lt;![\p{L}\d$_]-|[\p{L}\d$_])</prefix>
            <suffix>(?!-\p{L}|[\p{L}\d$_])</suffix>
            <keyword>void</keyword>
            <keyword>null</keyword>
            <keyword>NaN</keyword>
            <keyword>Infinity</keyword>
        </context>

        <context id="constant" style-ref="constant">
            <match extended="true">
                (?&lt;![\p{L}\d$_]-|[\p{L}\d$_])
                _*\p{Lu}[\p{Lu}\d_]*
                (?!-\p{L}|[\p{L}\d$_])
            </match>
        </context>

        <context id="boolean" style-ref="boolean">
            <prefix>(?&lt;![\p{L}\d$_]-|[\p{L}\d$_])</prefix>
            <suffix>(?!-\p{L}|[\p{L}\d$_])</suffix>
            <keyword>false</keyword>
            <keyword>true</keyword>
            <keyword>yes</keyword>
            <keyword>no</keyword>
            <keyword>on</keyword>
            <keyword>off</keyword>
        </context>

        <define-regex id="statement-keyword" extended="true">
            (?&lt;![\p{L}\d$_]-|[\p{L}\d$_])
            (return|break|continue|throw)
            (?!-\p{L}|[\p{L}\d$_])
        </define-regex>

        <define-regex id="loop-keyword" extended="true">
            (?&lt;![\p{L}\d$_]-|[\p{L}\d$_\.])
            (for(\s+own)?|while|until|loop|from|to|til|by|when)
            (?!-\p{L}|[\p{L}\d$_])
        </define-regex>

        <define-regex id="conditional-keyword" extended="true">
            (?&lt;![\p{L}\d$_]-|[\p{L}\d$_\.])
            (if|then|else|unless|switch|case|
             default|otherwise|fallthrough|
             and|or|xor|in|of|is|isnt)
            (?!-\p{L}|[\p{L}\d$_])
        </define-regex>

        <define-regex id="keywords-keyword" extended="true">
            (?&lt;![\p{L}\d$_]-|[\p{L}\d$_\.])
            (instanceof|extends|implements|catch|finally|with)
            (?!-\p{L}|[\p{L}\d$_])
        </define-regex>

        <define-regex id="value-keyword" extended="true">
            (?&lt;![\p{L}\d$_]-|[\p{L}\d$_])
            (do|let|var|const|that|it|not|typeof!?|new|class|
             delete!?|super|try|require!?|function|this)
            (?!-\p{L}|[\p{L}\d$_])
        </define-regex>

        <define-regex id="operator-regex" extended="true">
            ( (?&lt;![\p{L}\d$_])- | -(?!\p{L}) | [+*/^%?=&lt;&gt;!~:.@&amp;|] )
        </define-regex>

        <define-regex id="novalue-keywords" extended="true">
            \%{statement-keyword}|
            \%{loop-keyword}|
            \%{conditional-keyword}|
            \%{keywords-keyword}
        </define-regex>

        <!-- Keywords -->
        <context id="statement" style-ref="statement">
            <match>\%{statement-keyword}</match>
        </context>

        <context id="loop" style-ref="loop">
            <match>\%{loop-keyword}</match>
        </context>

        <context id="conditional" style-ref="conditional">
            <match>\%{conditional-keyword}</match>
        </context>

        <context id="keyword" style-ref="keyword">
            <match>\%{keywords-keyword}|\%{value-keyword}</match>
        </context>

        <context id="label" style-ref="label">
            <match>^\s*:\%{identifier}</match>
        </context>

        <context id="operator" style-ref="operator">
            <match>\%{operator-regex}</match>
        </context>

        <context id="delimiter" style-ref="delimiter">
            <match>[[\](){},;]</match>
        </context>

        <context id="function" style-ref="function">
            <match extended="true">
                (\%{identifier}
                 (?=\s*(:|(and|or|&amp;&amp;|\|\||[:?])?=)\s*
                 (\%{identifier}\s*((and|or|&amp;&amp;|\|\||[:?])?=)\s*)* # Chained assignment
                 # TODO improve the use of operators as functions (ie. check if unary)
                 ((\(.+\))?\s*!?(--?|~~?)&gt; | (~!?|!~?)?\s*function\s | \(\%{operator-regex}+)) |
                 # XXX issue of fixed-length lookbehind
                 ((?&lt;=(\s|~|!)function\s)|(?&lt;=^function\s)) \%{identifier} )
            </match>
        </context>

        <context id="constructor" style-ref="constructor">
            <match extended="true">
                (?&lt;![\p{L}\d$_]-|[\p{L}\d$_])
                [\p{Lu}][\p{L}0-9]+
                (?!-\p{L}|[\p{L}\d$_])
            </match>
        </context>

        <context id="application" style-ref="application">
            <match extended="true">
                (\%{identifier}
                 ((?=\??\s*\()                              # Explicit braced call
                 |(?=\??!)                                  # Explicit bang call
                 |(?=\??\s+
                   (!?(--?|~~?)&gt;                         # Function as argument
                   |([!~]|(\+\+?|--?|^^)[\p{L}\d$_@])       # Unary operators
                   |(@|\.\.\.|&lt;[|[])))                   # This, splats, back pipe and list of words
                 |(?=\??\s+\S)                              # Implicit arguments
                  (?!\??\s+                                 # aka. anything but:
                   (\%{novalue-keywords}                    # Novalue keywords
                   |\%{operator-regex}                      # Operators
                   |`\%{identifier}`                        # An infix call
                   |[\])}#,;`])))                           # Delimiters
                 # XXX issue of fixed-length lookbehind
                |(?&lt;=&lt;-\s|&lt;--\s|&lt;-!\s|&lt;--!\s     # Back call and pipe
                 |&lt;~\s|&lt;~~\s|&lt;~!\s|&lt;~~!\s|\|&gt;\s)
                 \%{identifier} (?!(\?|\??\s*\.)\%{identifier})
                |`\%{identifier}`)                          # Infix call
            </match>
        </context>

        <context id="livescript">
            <include>
                <context ref="block-comment"/>
                <context ref="close-comment-outside-comment"/>
                <context ref="line-comment"/>
                <context ref="regexp"/>
                <context ref="heregex"/>
                <context ref="string-heredocs-single"/>
                <context ref="string-heredocs-double"/>
                <context ref="string-single"/>
                <context ref="string-double"/>
                <context ref="backslash-string"/>
                <context ref="string-javascript"/>
                <context ref="words-list"/>
                <context ref="octal"/>
                <context ref="def:hexadecimal"/>
                <context ref="float"/>
                <context ref="decimal"/>
                <context ref="global"/>
                <context ref="constant"/>
                <context ref="boolean"/>
                <context ref="statement"/>
                <context ref="loop"/>
                <context ref="conditional"/>
                <context ref="keyword"/>
                <context ref="label"/>
                <context ref="operator"/>
                <context ref="delimiter"/>
                <context ref="function"/>
                <context ref="constructor"/>
                <context ref="application"/>
                <context ref="def:line-continue"/>
            </include>
        </context>
    </definitions>
</language>
